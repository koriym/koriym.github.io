---
layout: post
title: "不易の力 PHPerKaigi 2024"
date: 2024-04-03 02:30:00 +0900
comments: true
categories: blog
tags:
  - BEAR
---
2024/3/9にPHPerKaigi 2024 で[イベント駆動コンテンツ（Webアプリケーションの効率を再定義するBEAR.Sundayの分散キャッシングフレームワーク）](https://fortee.jp/phperkaigi-2024/proposal/92f5690d-2136-4237-9a4f-371edf188f36)という40分のトークを行いました。

## 最初のスライド

<img src="/images/event-driven-content/fistslide.png" alt="first slide" style="width: 75%;">

「まず、スライドをご覧ください。雲から楽しそうな物がぶら下がっているのをクマが見ています。これは何の象徴でしょうか。」

トークの冒頭でこのような呼びかけを行いました。

これから話すことは分散キャッシングなので、家の中に出現したクラウドから何かしらのサービスが提供されているということを表しています。
そしてこのクマの目線はぶら下がっているサービスではなくクラウドに向いていて、つまりそれを生み出す仕組みを注視しています。常に問題の本質を見つめるという姿勢の象徴にしています。

## 名前は世界へのシンボリックリンク

<img src="/images/event-driven-content/human.png" alt="human" style="width: 75%;">

「名前は意識の世界から現実世界へのシンボリックリンクであり、同一性確認のためのトークンとしての役割を果たしている」ということを、冒頭の「なぜタイトルを変更してはいけないのか」というアイスブレイクの理由に関連付けつつ、キャッシュの「同一性確認」にも繋げています。

名前には、トークンとしての役割（短く覚えやすいほどいい）と、内容表明としての役割（説明が豊かな方がいい）という矛盾した側面があります。
これがコンピュータサイエンスにおける二大難問の一つ「名前付けの困難」の理由になっていることに触れつつ、もう一つの難問である「キャッシュ」というテーマへと話を展開していきます。

このように、各スライドでは話の伏線を張りながら、全体を通して一つの物語を紡ぎ出すように構成しました。その点ではうまくいったと思います。構成は複雑ですが、進行はスムーズでした。

このトークを聞いて「映画のようだった」と評してくれた方がいました。
最初は何故そう思ったのだろうと感じたのですが、このスライドの背後にある物語性を感じ取ってくれたのだと思います。

## 誰のために何を作るのか

<img src="/images/event-driven-content/reuse.png" alt="reuse" style="width: 100%;">

このスライドの部分は全体を通しても最も重要なスライドの1つです。 キャッシュを"how"ではなく、"what"として捉えることで、本質に迫ります。
つまり技術的な詳細に焦点を当てるのではなく、キャッシュが果たす本当の役割に注目しました。

キャッシュ、つまりkey value storeによる保存を**関心による保存の最適化である事**としたことは、
CQRS(Command Query Responsibility Segregation、コマンドとクエリの責任分割)の考え方そのものです。
（実際このパッケージの名前はBEAR.Cacheなどではなく[BEAR.QueryRepository](https://github.com/bearsunday/BEAR.QueryRepository)です。）

ユーザーが真に望んでいるものは、「揮発性が高く常時消せるもの」というより、実は「本質的に永続的なもの」のであるという新しい視点を提示し、
キャッシュは「なるべくなら使わなくていいもの」という考えから「ここにこそ本質的な価値がある」という真逆の価値観への反転を促します。

ゴールを示しながらアイデアの起点として語りました。

## Outlook is gold

> 問題解決に決定的な影響力を与えるのは、問題の解法ではなく問題の定義や問題の捉え方

かつてAlan Kayはこの事を[Outlook is gold](https://lists.sugarlabs.org/archive/iaep/2009-July/006940.html)として表しました。
私はこの考えに大きな影響を受けていて、BEAR.Sundayの設計哲学の一つでもあります。

キャッシュの問題を捉える視点を変えることで、根源的で決定的な解決ができるのでは無いかと考えました。
オリジナルのアイデアはもう10年以上前、BEAR.Sundayの生まれる前からありました。
しかしこれをどのように実現したらいいのかなかなか良い案が浮かびませんでした。しかしタグベースでの依存解決やモダンCDNのインスタントパージ、その他のアイデアや技術の進化が重なり、ようやく実現できる時が来たと感じ、実装に着手しました。

このトークの後半で語る**不易**の積み重ねそのものでした。

## PHPNWから10年

<img src="/images/event-driven-content/phpnw2013.jpeg" alt="first slide" style="width: 100%;">

私が初めてカンファレンスでトークをしたのは、2013年にイギリスで開催された[PHPNW](https://conference.phpnw.org.uk/phpnw13/)です。
BEAR.Sundayは無名でその設計哲学の事なのに[好評](https://joind.in/event/phpnw-2013/a-resource-orientated-framework-using-the-diaoprest-triangle)を博しました。
この経験から、トークで大事なのは知名度ではなく、アイデアやインスピレーションを与えられるかどうかだと学びました。

イギリスでの成功を受けて、日本でも同じプレゼンテーションをしたいと思い、全国のPHPカンファレンスに応募しました。しかし、福岡、大阪、東京のPHPカンファレンスで全て落選してしまいます。

それでも2018年にPHPerKaigiで機会を得てトークを行い、今回で再度BEAR.Sunday関連の登壇となりました。
採択の可否の理由は応募者には分かりませんが、この10年間、BEAR.Sundayについてカンファレンスでトークができたのは、PHPNW、PHPerKaigi 2018、そして2024の3度だけです。

改めまして、足を運んで聞いてくださった方々、オンラインで視聴してくださった方々、本当にありがとうございました。
また、登壇の機会を与えてくださったPHPerKaigiのキュレーターの方々や、当日お世話になったスタッフの方々にも感謝申し上げます。

## Q&A

Q&Aでは3人の方から以下の興味深い質問、感想をいただきました。Q&Aが終わった後に、伝えきれなかったことに思いが及んだので、ここで改めて答えたいと思います。

### Q1. DI/AOP/RESTのフレームワークがなければ今回のキャッシングフレームワークに辿り着けなかったと思うのですが、いつこのアイデアを思いついたのですか？

A1. 「イベントドリブンコンテンツ」という言葉は知りませんでしたが、「破壊的変更が行われるまで消去されないキャッシュ」のアイデアはBEAR.Sundayの登場以前からありました。
つまり、10年以上前からのアイデアなのですが、当時はどうすれば実現の足掛かりができるかすら分かりませんでしたし、実現するにしてもサーバーサイドのキャッシュで行うつもりでした。

最初の着想は不確かでふわふわしたものでした。BEAR.Sundayはフレームワークを（従来のコンポーネントの集合ではなく）アプリケーションの全体制約として捉えています。
その意味でキャッシュを単なる呼び出しライブラリではなく、制約と呼べるものとして捉える方針はありました。しかし具体的なアイデアはありませんでした。
最初はコンテンツの依存関係専用のDSLを作るというアイデアもあり、実際にその設計を部分的に始めもしました。しかしすぐにその運用では不安が残る（＝ちょっと無理ですグマ）ことにも気づきました。

 * タグによる依存管理
 * モダンCDNのインスタントパージ
 * 部分キャッシュ（ドーナッツキャッシュ）
 * ETagレポジトリの管理

キャッシュをフレームワークと実装するには上記の4つのキーテクノロジーが必要でしたが、それらはそれぞれの技術の進化と組み合わせることで実現できるようになっていったのです。
CDNでタグ消去ができることは以前から知っていたのですが、RedisのエンジンだけでなくSymfony Cache全体でサポートがあり、これをコンテンツ依存解決と組み合わせること、
2015年のFastlyのThe Rise of Event-Driven Contentの記事の発見、
この2つを理解した時に、兼ねてよりのアイデアであった「破壊的変更が行われるまで消去されないキャッシュ」の実現が可能であると確信しました。

2011年と古い記事ですが、部分キャッシュとASP.NETを発見した時は、やり方よりも同じことを考え実装していた人たちがいたということで力になりました。
そしてAOPをメインにRESTの考え方を取り入れたBEAR.Sundayの設計哲学は、このキャッシュの実装にも大いに役立ち、完成への確信が持てるようになっていきました。

### Q2. 変わるもの、変わらないもの、見極めをどのようにするか？

**A2.** 優れた制約は変わらない、まず初めにこの一点。Webは30年以上の歴史があり様々な技術が来ては去っていってますが、HTML、URI、HTTPこの3つのキーテクノロジーはほとんど変わっていません。
問題に対する思考態度は大事です。それが制約として耐えうるものなのか、それとも単に要求や技術の一部なのかを見極めることが大事だと思います。

AOPのインターフェイスは2004年3月のリリースですが、今まで一度も破壊的変更が行われたことはありません。5・7・5の俳句の形式を確立したのは松尾芭蕉だと言われていますがこれも変わりません。
トークでも紹介しましたがBEAR.Sundayは最初の安定版リリース以来、破壊的変更を行ったことはありません。これはフレームワークをアプリケーション全体制約として捉え、その設計が成功している証拠であり成果です。

### Q3. オレオレフレームワーク開発者としての勇気をいただいた。

**A3.**  
ユーザー数が極めて限られているフレームワークを開発し維持し続けることに対して、無駄でナンセンスなことだと批判したり嘲笑したりする人は少なくありません。

しかし大事なのは、少数でも興味深いクライアントと、興味深いプロダクトに関わり、興味深い技術を維持開発できるかどうかです
。興味深い仕事ができるのであれば、ダウンロード数やGitHubスターの数は大事ではありません。
時に「Qiitaに乗ってない」と文句を言われることがあるかもしれません。しかしそんな人が大勢ユーザーになってくれても、プロジェクトを前に進める力にはなりません。

[技術的な投資はしなくていいし、したくないということ](https://x.com/tenjuu99/status/1366279351247937537)が当たり前になり、
カンファレンスで「道具の使い方」が多く話されるのに対して、「道具を作る」話やそのアイデアを聞くことがあまりない事を残念に思っていました。

私はキャリアの初めに、ごく少数の人たちがイノベーションを起こすのを目にしてきました。そしてそれはその後のキャリアに決定的な影響を与えました。
数は決定的な要因ではありません。重要なのはアイデアであり、物の見方、思考態度です。それを持っている人たちと一緒に仕事をして、興味深い技術に関われればそれが最高です。

これは本来大きなテーマで、もっと深く語りたいところですが、また機会があればお話ししたいと思います。
質問者の方が「オレオレフレームワーク開発者としての勇気をいただいた」と言ってくれたことは、とても嬉しかったです。私にとっても大きな励みになりました。ありがとうございました。

## スライド

AI時代になり初めてのトークということでスライドの挿絵に[DALL·E](https://openai.com/dall-e-3)で生成した画像を使いました。抽象的な概念を具体的に表現する能力には驚くばかりで、「再起を表してください」のプロンプトで合わせ鏡の中に立つクマが出てきた時は脱帽でした。

<iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/47c5a27b4ecc4397bdf0fd58b0cc75fc" title="イベント駆動コンテンツ (a.k.a Webアプリケーションの効率を再定義するBEAR.Sundayの分散キャッシングフレームワーク)" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe>

## トーク動画

Keynoteで録画した映像があります。

[https://www.youtube.com/embed/GWkoWWXoLko?si=AAnmVNkATJoCr9yP](https://www.youtube.com/embed/GWkoWWXoLko?si=AAnmVNkATJoCr9yP)

## 不易の力

<img src="/images/event-driven-content/ending-kuma.png" alt="ending" style="width: 35%;">


このトークの制作は困難を極めるものだろうという事は最初から予想していました。
10年に渡るアイデアの積み重ねや問題提起を、メタな視点を持ちながら興味深い技術詳細も織り交ぜ、その思考態度や制約を物語性を持って語ることは容易なことではありません。

一つのカンファレンストークとして成り立つような深いテーマを扱ったスライドがいくつもありました。扱う技術やトピックは広く深いものでしたが、シンプルなメッセージとして伝えたいと思いました。
芭蕉の「不易流行」はその助けになりました。

多くのアイデアや技術を駆使して実現したのは、Webが30年以上前に最初から持っていたRESTのキャッシュ制約です。
ここに新しい制約は1つもありません。Webが持っていた優れた制約へのリスペクトと、それがいかに私たちが抱える問題を解決するのかを示したかったのです。これこそが不易です。

技術的な解決策ではなく問題の捉え方や定義にこそ決定的な解決力があること、開発者の都合ではなくユーザーの本当の望みに焦点を当てること、不易を重ねることの強さ。それらを伝えたかったのです。
